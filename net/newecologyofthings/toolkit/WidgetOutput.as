package net.newecologyofthings.toolkit { 	import flash.display.MovieClip;	import flash.events.*;	import flash.text.TextField;	import flash.geom.Rectangle;	import flash.utils.*;	import net.newecologyofthings.toolkit.*;		/**	 * @author Philip van Allen, vanallen@artcenter.edu, The New Ecology of Things Lab, Art Center College of Design	 * 	 * thanks to the component example by David Barlia david@barliesque.com	 * http://studio.barliesque.com/blog/2008/12/as3-component-custom-ui/	 * which was based on earlier work	 * http://flexion.wordpress.com/2007/06/27/building-flash-cs3-components/	 * 	 */	public class WidgetOutput extends Widget	{ 		// vars		//public var hubIP:Number = 51000;		public var theConnection:SocketConnection;		public var fileConnection:SocketConnectionParams;				// working variables 				public var connectionComplete:Boolean = false;				// delay connection		private var connectDelayTimer:Timer;		private var randomDelay:int;			// inherit constructor, so we don't need to create one		//public function AnalogInput(w:Number = NaN, h:Number = NaN) {			//super(w,h);		//} 						// functions				override public function setupAfterLoad( event:Event ): void {			super.setupAfterLoad(event);			}						public function handleButton(buttonType:String, buttonState:String) {			if (buttonType == "connect") {				if (buttonState == "on") tryConnect();				else if (buttonState =="off") disConnect();			}		}				public function tryConnect():void {							//trace("name: " + paramsXMLname);			// set up connection to controller			if (mobileSetupComplete || deviceType != "mobile") {				if (theConnection == null) theConnection = new SocketConnection(this.name, remotehubIP, hubPort, this);				theConnection.openConnection();			} else {				thisWidget.connectButton.setState("off");				trace("can't connect until MobileControl is set");			}		}				public function disConnect(): void {			if (theConnection != null) theConnection.closeConnection();		}				public function processData( data:String): void {						//trace("the data: " + data);						var theValue = data.split(" ")[1];			if (theValue.indexOf("OK") >=0) {				if (data.indexOf("/service/arduino") >=0 || data.indexOf("/service/xbee") >=0) getHubDevice(data);				else hubDeviceName = "";				finishConnect();			} else if (theValue.indexOf("FAIL") >=0) {				disConnect();				failConnect(data);			} else trace("Unexpected data from output controller: " + data);		}				override public function finishConnect() {			connectionComplete = true;			//trace("..." + this.name + " connected");			//trace("..." + this.name + " connected to Hub device #" + hubDeviceNumber);			super.finishConnect();		}								//----------------------------------------------------------		// parameter getter setter functions					// parameters			}}