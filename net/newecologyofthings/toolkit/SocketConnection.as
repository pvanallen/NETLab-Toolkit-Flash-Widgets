package net.newecologyofthings.toolkit {	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.*;	import flash.utils.*;	import flash.events.DataEvent;	import flash.net.XMLSocket;	public class SocketConnection extends Sprite {    		private var connectionId:String;		private var hubIP:String = "localhost";		private var hubPort:int = 51000;		private var dataConsumer:MovieClip;		private var connectDelayTimer:Timer;		private var randomDelay:int;				private var xmlSocket:XMLSocket;	  		public function SocketConnection(connectionId, hubIP, hubPort, dataConsumer) {						this.connectionId = connectionId;			this.hubIP = hubIP;			this.hubPort = hubPort;			this.dataConsumer = dataConsumer;						randomDelay = Math.round((Math.random() * 1000) + 1000);			connectDelayTimer = new Timer(randomDelay, 1);			connectDelayTimer.addEventListener(TimerEvent.TIMER, finishConnect);									xmlSocket = new XMLSocket();		  			// Connect listener to send a message to the server			// after we make a successful connection			xmlSocket.addEventListener( Event.CONNECT, onConnect );		  			// Connect listener to send a message to the server			// after the connection is closed			xmlSocket.addEventListener( Event.CLOSE, onClose );		  			// Listen for when data is received from the socket server			xmlSocket.addEventListener( DataEvent.DATA, processData );		  			// Handle errors			xmlSocket.addEventListener( IOErrorEvent.IO_ERROR, onError );									}				private function onConnect( event:Event ):void {			trace("Widget '" + connectionId + "' connecting...");			//connectDelayTimer.start();			dataConsumer.initControllerConnection();					}				public function finishConnect(event:TimerEvent) {			//trace("finishConnect");			dataConsumer.initControllerConnection();		}			private function processData( event:DataEvent ):void {	 			dataConsumer.processData(event.data);		  		}				private function onClose( event:Event ) {			trace(connectionId + " connection closed");		}								 		private function onError( event:Event ) : void {			trace(connectionId + " Error Connecting ---> IS THE NETLAB HUB RUNNING?");		}				public function openConnection() : void {			// connect to the server, complete connection with onConnect function			if ( !xmlSocket.connected ) xmlSocket.connect( hubIP, hubPort );		}				public function sendData(theData:String) : void {			xmlSocket.send(theData + "\n");		}				public function closeConnection( ) : void {			if ( xmlSocket.connected ) xmlSocket.close();		}	}}