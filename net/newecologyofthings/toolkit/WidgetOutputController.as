package net.newecologyofthings.toolkit { 	import flash.display.MovieClip;	import flash.events.*;	import flash.text.TextField;	import flash.geom.Rectangle;	import flash.utils.*;	import net.newecologyofthings.toolkit.*;		/**	 * @author Philip van Allen, vanallen@artcenter.edu, The New Ecology of Things Lab, Art Center College of Design	 * 	 * thanks to the component example by David Barlia david@barliesque.com	 * http://studio.barliesque.com/blog/2008/12/as3-component-custom-ui/	 * which was based on earlier work	 * http://flexion.wordpress.com/2007/06/27/building-flash-cs3-components/	 * 	 */	public class WidgetOutputController extends WidgetOutput { 				// vars				// working variables 				// delay connection		private var connectDelayTimer:Timer;		private var randomDelay:int;				// inherit constructor, so we don't need to create one		//public function AnalogInput(w:Number = NaN, h:Number = NaN) {			//super(w,h);		//} 						// functions				override public function setupAfterLoad( event:Event ): void {			super.setupAfterLoad(event);						//serialDeviceName = serialNameShort(serialPort);		}				//----------------------------------------------------------		// parameter getter setter functions				// parameters				private var _controllerIP:String = "127.0.0.1";		[Inspectable (name = "controllerIP", variable = "controllerIP", type = "String", defaultValue = "127.0.0.1")]		public function get controllerIP():String { return _controllerIP; }		public function set controllerIP(value:String):void {			_controllerIP = value;			//draw();		}				private var _controllerPort:Number = 10000;		[Inspectable (name = "controllerPort", variable = "controllerPort", type = "Number", defaultValue = 10000)]		public function get controllerPort():Number { return _controllerPort; }		public function set controllerPort(value:Number):void {			_controllerPort = value;			//draw();		}						private var _controllerOutputNum:Number = 0;		[Inspectable (name = "controllerOutputNum", variable = "controllerOutputNum", type = "Number", defaultValue = 0)]		public function get controllerOutputNum():Number { return _controllerOutputNum; }		public function set controllerOutputNum(value:Number):void {			_controllerOutputNum = value;			draw();		}						private var _serialPort:String = "/dev/cu.usb*";		[Inspectable (name = "serialPort", variable = "serialPort", type = "String", defaultValue = "/dev/cu.usb*")]		public function get serialPort():String { return _serialPort; }		public function set serialPort(value:String):void {			_serialPort = value;			//draw();		}				private var _multiplier:Number = 1;		[Inspectable (name = "multiplier", variable = "multiplier", type = "Number", defaultValue = 1)]		public function get multiplier():Number { return _multiplier; }		public function set multiplier(value:Number):void {			_multiplier = value;			//draw();		}						private var _oscString:String = "/netlabwidget";				[Inspectable (name = "oscString", variable = "oscString", type = "String", defaultValue = "/netlabwidget")]			public function get oscString():String { return _oscString; }		public function set oscString(value:String):void {			_oscString = value;			draw();		}				private var _hubFeedName:String = "feed0";				[Inspectable (name = "hubFeedName", variable = "hubFeedName", type = "String", defaultValue = "feed0")]			public function get hubFeedName():String { return _hubFeedName; }		public function set hubFeedName(value:String):void {			_hubFeedName = value;			draw();		}			}}